
USE master
GO
if exists (select * from sysdatabases where name='bank')
	DROP DATABASE bank
GO

CREATE DATABASE bank
GO
USE bank
GO

-- Generated by Oracle SQL Developer Data Modeler 19.2.0.182.1216
--   at:        2019-12-16 21:19:17 CET
--   site:      SQL Server 2012
--   type:      SQL Server 2012

CREATE TABLE account (
    account_id    INTEGER NOT NULL,
    district_id   INTEGER,
    frequency     VARCHAR(100),
    date          DATE
)

go

ALTER TABLE account ADD constraint account_pk PRIMARY KEY CLUSTERED (account_id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 

go

CREATE TABLE client (
    client_id      INTEGER NOT NULL,
    birth_number   DATE,
    district_id    INTEGER,
    gender         CHAR(1)
)

go

ALTER TABLE client ADD constraint client_pk PRIMARY KEY CLUSTERED (client_id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 
	 
go

CREATE TABLE credit_card (
    card_id   INTEGER NOT NULL,
    disp_id   INTEGER,
    type      VARCHAR(100),
    issued    datetime
)

go

ALTER TABLE credit_card ADD constraint credit_card_pk PRIMARY KEY CLUSTERED (card_id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 
	 
go

CREATE TABLE disposition (
    disp_id      INTEGER NOT NULL,
    client_id    INTEGER,
    account_id   INTEGER,
    type         VARCHAR(100)
)

go

ALTER TABLE disposition ADD constraint disposition_pk PRIMARY KEY CLUSTERED (disp_id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 

go

CREATE TABLE district (
    district_id   INTEGER NOT NULL,
    a2            VARCHAR(100),
    a3            VARCHAR(100),
    a4            INTEGER,
    a5            INTEGER,
    a6            INTEGER,
    a7            INTEGER,
    a8            INTEGER,
    a9            INTEGER,
    a10           DECIMAL(18, 1),
    a11           INTEGER,
    a12           DECIMAL(18, 2),
    a13           DECIMAL(18, 2),
    a14           INTEGER,
    a15           INTEGER,
    a16           INTEGER
)

go

ALTER TABLE district ADD constraint district_pk PRIMARY KEY CLUSTERED (district_id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 

go

CREATE TABLE loan (
    loan_id      INTEGER NOT NULL,
    account_id   INTEGER,
    date         DATE,
    amount       INTEGER,
    duration     INTEGER,
    payments     DECIMAL(18, 2),
    status       CHAR(3)
)

go

ALTER TABLE loan ADD constraint loan_pk PRIMARY KEY CLUSTERED (loan_id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 

go

CREATE TABLE payment_order (
    order_id     INTEGER NOT NULL,
    account_id   INTEGER,
    bank_to      CHAR(4),
    account_to   VARCHAR(100),
    amount       DECIMAL(18, 2),
    k_symbol     VARCHAR(100)
)

go

ALTER TABLE payment_order ADD constraint payment_order_pk PRIMARY KEY CLUSTERED (order_id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 

go

CREATE TABLE trans (
    trans_id     INTEGER NOT NULL,
    account_id   INTEGER,
    date         DATE,
    type         VARCHAR(100),
    operation    VARCHAR(100),
    amount       DECIMAL(18, 2),
    balance      DECIMAL(18, 2),
    k_symbol     VARCHAR(100),
    bank         CHAR(4),
    account      VARCHAR(100)
)

go

ALTER TABLE trans ADD constraint transaction_pk PRIMARY KEY CLUSTERED (trans_id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 

go

-- Load data
BULK INSERT account
FROM 'C:\Users\elena\Desktop\DW and BI\data_berka\account.asc'
WITH
    (
    FIRSTROW = 2,
    FIELDTERMINATOR = ';',  --CSV field delimiter
    ROWTERMINATOR = '\n',   --Use to shift the control to next row
    TABLOCK
    )

go

BULK INSERT credit_card
FROM 'C:\Users\elena\Desktop\DW and BI\data_berka\card.asc'
WITH
    (
    FIRSTROW = 2,
    FIELDTERMINATOR = ';',  --CSV field delimiter
    ROWTERMINATOR = '\n',   --Use to shift the control to next row
    TABLOCK
    )

go

BULK INSERT disposition
FROM 'C:\Users\elena\Desktop\DW and BI\data_berka\disp.asc'
WITH
    (
    FIRSTROW = 2,
    FIELDTERMINATOR = ';',  --CSV field delimiter
    ROWTERMINATOR = '\n',   --Use to shift the control to next row
    TABLOCK
    )

go

BULK INSERT district
FROM 'C:\Users\elena\Desktop\DW and BI\data_berka\district.asc'
WITH
    (
    FIRSTROW = 2,
    FIELDTERMINATOR = ';',  --CSV field delimiter
    ROWTERMINATOR = '\n',   --Use to shift the control to next row
    TABLOCK
    )

go

BULK INSERT loan
FROM 'C:\Users\elena\Desktop\DW and BI\data_berka\loan.asc'
WITH
    (
    FIRSTROW = 2,
    FIELDTERMINATOR = ';',  --CSV field delimiter
    ROWTERMINATOR = '\n',   --Use to shift the control to next row
    TABLOCK
    )

go

BULK INSERT payment_order
FROM 'C:\Users\elena\Desktop\DW and BI\data_berka\order.asc'
WITH
    (
    FIRSTROW = 2,
    FIELDTERMINATOR = ';',  --CSV field delimiter
    ROWTERMINATOR = '\n',   --Use to shift the control to next row
    TABLOCK
    )

go

BULK INSERT trans
FROM 'C:\Users\elena\Desktop\DW and BI\data_berka\trans.asc'
WITH
    (
    FIRSTROW = 2,
    FIELDTERMINATOR = ';',  --CSV field delimiter
    ROWTERMINATOR = '\n',   --Use to shift the control to next row
    TABLOCK
    ) 

go

BULK INSERT client
FROM 'C:\Users\elena\Desktop\DW and BI\data_berka\client_new1.csv'
WITH
    (
    FIRSTROW = 2,
    FIELDTERMINATOR = ';',  --CSV field delimiter
    ROWTERMINATOR = '\n',   --Use to shift the control to next row
    TABLOCK
    ) 

go

--generate DW with facts and dimensions

-- Generated by Oracle SQL Developer Data Modeler 19.2.0.182.1216
--   at:        2019-12-17 23:27:39 CET
--   site:      SQL Server 2012
--   type:      SQL Server 2012



CREATE TABLE account_dimension (
    account_id   INTEGER NOT NULL,
    frequency    VARCHAR(100),
    creation_date   DATE,
    owner_id     INTEGER
)

go

ALTER TABLE account_dimension ADD constraint account_dimension_pk PRIMARY KEY CLUSTERED (account_id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 
	 
go

CREATE TABLE client_dimension (
    client_id      INTEGER NOT NULL,
    birth_number   DATE,
    gender         CHAR(1)
)

go

ALTER TABLE client_dimension ADD constraint client_dimension_pk PRIMARY KEY CLUSTERED (client_id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 
	 
go

CREATE TABLE credit_card_fact (
    card_id                          INTEGER NOT NULL,
    type                             VARCHAR(100),
    account_dimension_account_id     INTEGER,
    client_dimension_client_id       INTEGER,
    district_dimension_district_id   INTEGER,
    date_dimension_date              DATE
)

go

ALTER TABLE credit_card_fact ADD constraint credit_card_fact_pk PRIMARY KEY CLUSTERED (card_id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 
	 
go

CREATE TABLE date_dimension (
    date       DATE NOT NULL,
    week_day   VARCHAR(100),
    month      INTEGER,
    year       INTEGER
)

go

ALTER TABLE date_dimension ADD constraint date_dimension_pk PRIMARY KEY CLUSTERED (date)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 
	 
go

CREATE TABLE district_dimension (
    district_id   INTEGER NOT NULL,
    a2            VARCHAR(100),
    a3            VARCHAR(100),
    a4            INTEGER,
    a5            INTEGER,
    a6            INTEGER,
    a7            INTEGER,
    a8            INTEGER,
    a9            INTEGER,
    a10           DECIMAL(18, 1),
    a11           INTEGER,
    a12           DECIMAL(18, 2),
    a13           DECIMAL(18, 2),
    a14           INTEGER,
    a15           INTEGER,
    a16           INTEGER
)

go

ALTER TABLE district_dimension ADD constraint district_dimension_pk PRIMARY KEY CLUSTERED (district_id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 
	 
go

CREATE TABLE loan_fact (
    loan_id                          INTEGER NOT NULL,
    amount                           INTEGER,
    duration                         INTEGER,
    payments                         DECIMAL(18, 2),
    status                           CHAR(3),
    client_dimension_client_id       INTEGER,
    district_dimension_district_id   INTEGER,
    date_dimension_date              DATE,
    account_dimension_account_id     INTEGER NOT NULL
)

go 

CREATE unique nonclustered index loan_fact__idx ON loan_fact ( account_dimension_account_id ) 

go

ALTER TABLE loan_fact ADD constraint loan_fact_pk PRIMARY KEY CLUSTERED (loan_id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 
	 
go

CREATE TABLE order_fact (
    order_id                         INTEGER NOT NULL,
    bank_to                          CHAR(4),
    account_to                       VARCHAR(100),
    amount                           DECIMAL(18, 2),
    k_symbol                         VARCHAR(100),
    account_dimension_account_id     INTEGER,
    client_dimension_client_id       INTEGER,
    district_dimension_district_id   INTEGER
)

go

ALTER TABLE order_fact ADD constraint order_fact_pk PRIMARY KEY CLUSTERED (order_id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 

go

CREATE TABLE transaction_fact (
    trans_id                         INTEGER NOT NULL,
    type                             VARCHAR(100),
    operation                        VARCHAR(100),
    amount                           DECIMAL(18, 2),
    balance                          DECIMAL(18, 2),
    k_symbol                         VARCHAR(100),
    bank                             CHAR(4),
    account                          VARCHAR(100),
    account_dimension_account_id     INTEGER,
    client_dimension_client_id       INTEGER,
    district_dimension_district_id   INTEGER,
    date_dimension_date              DATE
)

go

ALTER TABLE transaction_fact ADD constraint transaction_fact_pk PRIMARY KEY CLUSTERED (trans_id)
     WITH (
     ALLOW_PAGE_LOCKS = ON , 
     ALLOW_ROW_LOCKS = ON ) 
	 
go

ALTER TABLE credit_card_fact
    ADD CONSTRAINT credit_card_fact_account_dimension_fk FOREIGN KEY ( account_dimension_account_id )
        REFERENCES account_dimension ( account_id )
ON DELETE NO ACTION 
    ON UPDATE no action 
	
go

ALTER TABLE credit_card_fact
    ADD CONSTRAINT credit_card_fact_client_dimension_fk FOREIGN KEY ( client_dimension_client_id )
        REFERENCES client_dimension ( client_id )
ON DELETE NO ACTION 
    ON UPDATE no action 
	
go

ALTER TABLE credit_card_fact
    ADD CONSTRAINT credit_card_fact_date_dimension_fk FOREIGN KEY ( date_dimension_date )
        REFERENCES date_dimension ( date )
ON DELETE NO ACTION 
    ON UPDATE no action 
	
go

ALTER TABLE credit_card_fact
    ADD CONSTRAINT credit_card_fact_district_dimension_fk FOREIGN KEY ( district_dimension_district_id )
        REFERENCES district_dimension ( district_id )
ON DELETE NO ACTION 
    ON UPDATE no action 
	
go

ALTER TABLE loan_fact
    ADD CONSTRAINT loan_fact_account_dimension_fk FOREIGN KEY ( account_dimension_account_id )
        REFERENCES account_dimension ( account_id )
ON DELETE NO ACTION 
    ON UPDATE no action 
	
go

ALTER TABLE loan_fact
    ADD CONSTRAINT loan_fact_client_dimension_fk FOREIGN KEY ( client_dimension_client_id )
        REFERENCES client_dimension ( client_id )
ON DELETE NO ACTION 
    ON UPDATE no action 
	
go

ALTER TABLE loan_fact
    ADD CONSTRAINT loan_fact_date_dimension_fk FOREIGN KEY ( date_dimension_date )
        REFERENCES date_dimension ( date )
ON DELETE NO ACTION 
    ON UPDATE no action 

go

ALTER TABLE loan_fact
    ADD CONSTRAINT loan_fact_district_dimension_fk FOREIGN KEY ( district_dimension_district_id )
        REFERENCES district_dimension ( district_id )
ON DELETE NO ACTION 
    ON UPDATE no action 
	
go

ALTER TABLE order_fact
    ADD CONSTRAINT order_fact_account_dimension_fk FOREIGN KEY ( account_dimension_account_id )
        REFERENCES account_dimension ( account_id )
ON DELETE NO ACTION 
    ON UPDATE no action 
	
go

ALTER TABLE order_fact
    ADD CONSTRAINT order_fact_client_dimension_fk FOREIGN KEY ( client_dimension_client_id )
        REFERENCES client_dimension ( client_id )
ON DELETE NO ACTION 
    ON UPDATE no action 
	
go

ALTER TABLE order_fact
    ADD CONSTRAINT order_fact_district_dimension_fk FOREIGN KEY ( district_dimension_district_id )
        REFERENCES district_dimension ( district_id )
ON DELETE NO ACTION 
    ON UPDATE no action 
	
go

ALTER TABLE transaction_fact
    ADD CONSTRAINT transaction_fact_account_dimension_fk FOREIGN KEY ( account_dimension_account_id )
        REFERENCES account_dimension ( account_id )
ON DELETE NO ACTION 
    ON UPDATE no action 
	
go

ALTER TABLE transaction_fact
    ADD CONSTRAINT transaction_fact_client_dimension_fk FOREIGN KEY ( client_dimension_client_id )
        REFERENCES client_dimension ( client_id )
ON DELETE NO ACTION 
    ON UPDATE no action 
	
go

ALTER TABLE transaction_fact
    ADD CONSTRAINT transaction_fact_date_dimension_fk FOREIGN KEY ( date_dimension_date )
        REFERENCES date_dimension ( date )
ON DELETE NO ACTION 
    ON UPDATE no action 
	
go

ALTER TABLE transaction_fact
    ADD CONSTRAINT transaction_fact_district_dimension_fk FOREIGN KEY ( district_dimension_district_id )
        REFERENCES district_dimension ( district_id )
ON DELETE NO ACTION 
    ON UPDATE no action 
	
go


-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             8
-- CREATE INDEX                             1
-- ALTER TABLE                             23
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE DATABASE                          0
-- CREATE DEFAULT                           0
-- CREATE INDEX ON VIEW                     0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE ROLE                              0
-- CREATE RULE                              0
-- CREATE SCHEMA                            0
-- CREATE SEQUENCE                          0
-- CREATE PARTITION FUNCTION                0
-- CREATE PARTITION SCHEME                  0
-- 
-- DROP DATABASE                            0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0

-- populate the DW with data
-- first load the date_dimension table
-- then load the other dimension tables (they are referenced by the fact tables)
-- at the end load the fact tables 
BULK INSERT date_dimension
FROM 'C:\Users\elena\Desktop\DW and BI\data_berka\date.csv'
WITH
    (
    FIRSTROW = 2,
    FIELDTERMINATOR = ';',  --CSV field delimiter
    ROWTERMINATOR = '\n',   --Use to shift the control to next row
    TABLOCK
    ) 

go

INSERT INTO account_dimension (account_id,frequency,creation_date,owner_id)
    select account.account_id, account.frequency, account.date, disposition.client_id
    from account 
    join disposition on account.account_id = disposition.account_id
    where type = '"OWNER"';

go

INSERT INTO client_dimension (client_id,birth_number,gender)
    select client_id,birth_number,gender
	from client;

go

INSERT INTO district_dimension 
    select *
	from district;

go

-- fact tables
-- credit_card_fact: dimensions are account, client, client address, date of issuing the credit card
INSERT INTO credit_card_fact
  select credit_card.card_id,credit_card.type,disposition.account_id,disposition.client_id,client.district_id,credit_card.issued
  from credit_card
  join disposition on credit_card.disp_id = disposition.disp_id
  join client on disposition.client_id = client.client_id;

go

-- loan_fact: dimensions are account, client (owner of the account), address of the owner, date of granting the loan
INSERT INTO loan_fact
   select loan_id,amount,duration,payments,status,account_dimension.owner_id,client.district_id,loan.date, loan.account_id
   from loan
   join account_dimension on loan.account_id = account_dimension.account_id
   join client on account_dimension.owner_id = client.client_id;

go

-- transaction_fact: dimensions are account, client (owner of the account), address of the branch, date of the transaction
INSERT INTO transaction_fact
    select trans_id,trans.type,operation,amount,balance,k_symbol,bank,account,trans.account_id,disposition.client_id,account.district_id,trans.date
	from trans
	join account on trans.account_id = account.account_id
	join disposition on account.account_id = disposition.account_id
	where disposition.type = '"OWNER"';

go

-- order_fact: dimensions are account, client (owner of the account), address of the branch
INSERT INTO order_fact 
    select order_id,bank_to,account_to,amount,k_symbol,payment_order.account_id,disposition.client_id,account.district_id
	from payment_order
	join account on payment_order.account_id = account.account_id
	join disposition on account.account_id = disposition.account_id
	where disposition.type = '"OWNER"';

go

-- Примерен report: Клиентите на кой филиал са направили най-много транзакции през май 1995?
select top 1 a2
from transaction_fact
join date_dimension on transaction_fact.date_dimension_date = date_dimension.date
join district_dimension on transaction_fact.district_dimension_district_id = district_dimension.district_id
where month = 5 and year = 1995
group by a2
order by COUNT(trans_id);